#!/bin/bash

# OpenSSL
get-chain() {
    echo | openssl s_client -connect ${1}:${2:-443} -showcerts 2>/dev/null | \
        awk '/-----BEGIN/{out=sprintf("'${1}'-%02d.cer",++count); p=1} /-----END/ {print > out; p=0} p {print > out}'
}

cert2key() {
    N=$( (openssl x509 -in $1 -noout -modulus | \
        openssl md5; openssl rsa -in $2 -noout -modulus | openssl md5) | uniq | wc -l )
    if [ $N == 1 ]; then
        echo "Cert and key MATCH"
    else
        echo "Cert and key DO NOT MATCH"
    fi
}

show-p12cert() { openssl pkcs12 -in $1 -nokeys -clcerts | openssl x509 -noout -text; }

dump-p7certs() { openssl pkcs7 -in $1 -print_certs | \
    awk '/-----BEGIN/ {out=sprintf("'${1%.*}'-%02d.cer",++count); p=1} /-----END/ {print > out; p=0} p {print > out}'; }

fix-cert-name() {
    openssl x509 -in "${1}" -noout -subject | \
        awk -F' = ' '{print $NF}' | \
        sed '
            s/.*/\L&/        # conver to lowercase (requires GNU sed!)
            s/ - */-/g       # condense hyphenations
            s/^\*/WILDCARD/  # label wildcards (I may hate this)
            s/[)]$//         # drop trailing parens
            s/ [(]/_/g       # condense/replace leading parens
            s/[ :/()*]/_/g   # replace misc chars with underscore
        '
}

aesenc() {
    openssl aes-256-cbc -e -salt -in "$1" -out "$1.enc"
}

# SSH
## Generate SSH aliases for shortnames in ~/.ssh/config (as a function so I can reload quickly)
ssh-alias() {
    if [ -s ${HOME}/.ssh/config ]; then
        INCS=($(awk '/^Include/{print $NF}' ${HOME}/.ssh/config))
        for FILE in config ${INCS[@]}; do
            for NAME in $(awk '/^Host / && $2 !~ /\*/ {for (i=1;i<=NF;++i) if (i>1 && $i !~ /\./ ) print $i}' \
                ${HOME}/.ssh/${FILE}); do
                alias ${NAME}="ssh ${NAME}"
            done
        done
    fi
}
ssh-alias

## For hosts where I immediately sudo su -
root() { ssh $@ -t "sudo su -"; }


# Docker
docker-flatten() {
    docker export $(docker run -d ${1} /bin/bash) | docker import â€“ ${2}
}

## Found at: http://stackoverflow.com/questions/24481564/how-can-i-find-docker-image-with-specific-tag-in-docker-registry-in-docker-comma
docker-tags() {
    curl -s -S "https://registry.hub.docker.com/v2/repositories/$@/tags/" | jq '."results"[]["name"]' | sort
}

## Check the balance of Docker's wonderful rate limit
docker-rl() {
    TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
    curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest 2>&1 | \
        grep ratelimit-
}

# shrink-qcow2 () {
#     mv ${1} ${1}.BACKUP && qemu-img convert -O qcow2 ${1}.BACKUP ${1}
# }

# Git
## TODO: deal with spaces in directory names
git-remotes() {
    for DIR in $(find . -type d); do
        [ -d "$DIR"/.git ] && \
            (cd "$DIR" && printf "${DIR}: [%s] %s\n" $(git remote -v | awk '{print $1" "$2}' | uniq))
    done
}

getgit() {
    (cd ${D}; if [[ -d .git ]]; then
        printf "${PWD}, %s\n" $(git config --get remote.origin.url)
    else
        for D in $(find . -maxdepth 1 -mindepth 1 -type d -regex '.*/[^.-].*' -printf '%f\n'); do
            getgit ${D}
        done
    fi)
}

## Assumes jq is available!
ghostars() {
    for ORG in $@; do
        printf "$ORG: %s\n" $(curl -s https://api.github.com/orgs/$ORG/repos | \
        jq '[ .[] | .stargazers_count ] | add')
    done
}

gitlarge () {
    # List objects in the repository sorted by size
    # (not necessarily the largest files, but the largest objects)
    # Note: this will not work on a bare repository
    git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | \
        grep -v tag | sort -k3nr
}

# Misc
ls-() {
    ls -$@
}

## Send/receive files over netcat (port hardcoded for simplicity)
send() {
    HOST=$1; shift
    echo "Sending to $HOST:10301..."
    if [ $(which pv) ]; then
        tar czf - $@ | pv | nc -Nv $HOST 10301
    else
        1>&2 echo "pv not found, so no stats for you!"
        tar cvzf - $@ | nc -Nv $HOST 10301
    fi
    echo "Done"
}

recv() {
    echo "$(hostname -f): Listening on port 10301..."
    nc -nlv 10301 | tar xvzp 2>/dev/null
    echo "Done"
}

# Stashing this for now
# from: https://gist.github.com/cdown/1163649
# urlencode() {
#     old_lc_collate=$LC_COLLATE
#     LC_COLLATE=C

#     local length="${#1}"
#     for (( i = 0; i < length; i++ )); do
#         local c="${1:i:1}"
#         case $c in
#             [a-zA-Z0-9.~_-]) printf "$c" ;;
#             *) printf '%%%02X' "'$c" ;;
#         esac
#     done

#     LC_COLLATE=$old_lc_collate
# }

# randh() {
#     head -c$(( ${1:-16} / 2 )) < /dev/urandom | xxd -p
# }

randh() {
    LC_ALL=C tr -dc 'a-f0-9' < /dev/urandom | head -c${1:-16}
}

randa() {
    LC_ALL=C tr -dc '[:alnum:]' < /dev/urandom | head -c${1:-16}
}

randg() {
    LC_ALL=C tr -dc '[:graph:]' < /dev/urandom | head -c${1:-16}
}
